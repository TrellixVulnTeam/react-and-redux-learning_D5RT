{"ast":null,"code":"var _jsxFileName = \"/Users/james_cameron-mowat/seasons/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from './Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (module.hot) {\n  module.hot.accept();\n} // functional component\n//const App = () => {\n// geolocation api activation retrieving user location\n//window.navigator.geolocation.getCurrentPosition(\n// success\n//(position) => console.log(position),\n// failure\n//(err) => console.log(err)\n//);\n//return <div>Latitude: </div>;\n//};\n// class based component expects methods from a sub class\n// we need this to handle asynchronous operations (compiling html before we recieve our current position)\n// getting geolocation, success, error\n// react says we have to define render\n\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      errorMessage: ''\n    };\n  }\n\n  // LifeCycle methods\n  // shows up when component shows up on the screen\n  componentDidMount() {\n    console.log('My component did render to the screen'); // DATA LOADING (previously )\n\n    window.navigator.geolocation.getCurrentPosition( // refactored ES6 syntax\n    position => this.setState({\n      lat: position.coords.latitude\n    }), // on success\n    // we called setstate!!!\n    // never directly assign state with = unless in the constructor!!!!\n    err => this.setState({\n      errorMessage: err.message\n    }) // treat the error properly\n    );\n  } // this shows up when the component is rerendered\n\n\n  componentDidUpdate() {\n    console.log('My component was just updated - it rerendered');\n  }\n\n  render() {\n    // this is called very frequently so we have get current position() into the constructor\n    // this is called conditional rendering\n    // if we get an error\n    if (this.state.errorMessage && !this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", this.state.errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }, this);\n    } // if we don't\n\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(SeasonDisplay, {\n        lat: this.state.lat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 14\n      }, this);\n    } // return <div>Loading!</div>\n    // remember not to have the semi colon when you go multi-line\n    // regardless show the following\n\n\n    return /*#__PURE__*/_jsxDEV(Spinner, {\n      message: \"Please accept location request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 83,\n  columnNumber: 17\n}, this), document.querySelector(\"#root\"));","map":{"version":3,"sources":["/Users/james_cameron-mowat/seasons/src/index.js"],"names":["React","ReactDOM","SeasonDisplay","Spinner","module","hot","accept","App","Component","state","lat","errorMessage","componentDidMount","console","log","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","componentDidUpdate","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,IAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACD,C,CAED;AACA;AACC;AACA;AACC;AACA;AACA;AACA;AACD;AAGA;AACD;AACA;AACA;AACA;AAEA;;;AACA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAchCC,KAdgC,GAcxB;AAACC,MAAAA,GAAG,EAAE,IAAN;AAAYC,MAAAA,YAAY,EAAE;AAA1B,KAdwB;AAAA;;AAgBlC;AACA;AACEC,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EADiB,CAGjB;;AACAC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,EACE;AACIC,IAAAA,QAAQ,IAAK,KAAKC,QAAL,CAAc;AAACV,MAAAA,GAAG,EAAES,QAAQ,CAACE,MAAT,CAAgBC;AAAtB,KAAd,CAFnB,EAEkE;AAC1D;AACA;AACFC,IAAAA,GAAG,IAAI,KAAKH,QAAL,CAAc;AAACT,MAAAA,YAAY,EAAEY,GAAG,CAACC;AAAnB,KAAd,CALb,CAMM;AANN;AAQD,GA9B+B,CAgClC;;;AACEC,EAAAA,kBAAkB,GAAE;AAClBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AACD;;AAEDY,EAAAA,MAAM,GAAG;AAAE;AACR;AAEA;AACA,QAAG,KAAKjB,KAAL,CAAWE,YAAX,IAA2B,CAAC,KAAKF,KAAL,CAAWC,GAA1C,EAA8C;AAC7C,0BAAO;AAAA,8BAAa,KAAKD,KAAL,CAAWE,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KANK,CAOL;;;AACD,QAAG,CAAC,KAAKF,KAAL,CAAWE,YAAZ,IAA4B,KAAKF,KAAL,CAAWC,GAA1C,EAA8C;AAC7C,0BAAO,QAAC,aAAD;AAAe,QAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KAVK,CAWN;AACA;AACC;;;AACA,wBAAO,QAAC,OAAD;AAAS,MAAA,OAAO,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AApD+B;;AAuDlCT,QAAQ,CAACyB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAzB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from './Spinner';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// functional component\n//const App = () => {\n\t// geolocation api activation retrieving user location\n\t//window.navigator.geolocation.getCurrentPosition(\n\t\t// success\n\t\t//(position) => console.log(position),\n\t\t// failure\n\t\t//(err) => console.log(err)\n\t//);\n\n\n\t//return <div>Latitude: </div>;\n//};\n// class based component expects methods from a sub class\n// we need this to handle asynchronous operations (compiling html before we recieve our current position)\n// getting geolocation, success, error\n\n// react says we have to define render\nclass App extends React.Component {\n\t// when an instance of this class is created\n\t// this constructor is called before anything else\n\t// it makes it a good place to initialise state\n\n  // INITIAL USE OF CONSTRUCTOR\n\t//constructor(props){\n\t\t// we are overriding the subclass, super with props makes sure that the parent is also called\n\t\t//super(props);\n\t\t//this.state = {lat: null, errorMessage: \"\"}; // state object default initialised    \n\t//}\n\n  // REFACTORED STATE INITIALISATION - this is the same as the initialisation\n  // in the constructor version, Babel makes a constructor for us\n  state = {lat: null, errorMessage: ''};\n\n// LifeCycle methods\n// shows up when component shows up on the screen\n  componentDidMount(){\n    console.log('My component did render to the screen'); \n\n    // DATA LOADING (previously )\n    window.navigator.geolocation.getCurrentPosition(\n      // refactored ES6 syntax\n          position =>  this.setState({lat: position.coords.latitude}),// on success\n            // we called setstate!!!\n            // never directly assign state with = unless in the constructor!!!!\n          err => this.setState({errorMessage: err.message})\n          // treat the error properly\n      );\n  }\n\n// this shows up when the component is rerendered\n  componentDidUpdate(){\n    console.log('My component was just updated - it rerendered');\n  }\n\n  render() { // this is called very frequently so we have get current position() into the constructor\n     // this is called conditional rendering\n\n     // if we get an error\n    \tif(this.state.errorMessage && !this.state.lat){\n    \t\treturn <div>Error: {this.state.errorMessage}</div>;\n    \t}\n      // if we don't\n    \tif(!this.state.errorMessage && this.state.lat){\n    \t\treturn <SeasonDisplay lat={this.state.lat}/>;\n    \t}\n    \t// return <div>Loading!</div>\n    \t// remember not to have the semi colon when you go multi-line\n      // regardless show the following\n      return <Spinner message=\"Please accept location request\"/>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));"]},"metadata":{},"sourceType":"module"}