{"ast":null,"code":"var _jsxFileName = \"/Users/james_cameron-mowat/pics/src/components/app.js\";\nimport React from 'react'; // imports we have created by convention go at the bottom\n\nimport axios from 'axios';\nimport SearchBar from './SearchBar'; // refactored to class based component so we can access search\n// bar from here\n// const App = () => {\n// \treturn (\n// \t\t<div className=\"ui container\" \n// \t\tstyle={{marginTop: '10px'}}>\n// \t\t\t<SearchBar/>\n// \t\t</div>\n// \t\t);\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      images: []\n    };\n  }\n\n  // we expect an array of images as default\n  // here we can start doing data loading from inside the app\n  // async keyword we can use axios await function instead of a standard promise, then. Can be easier\n  async onSearchSubmit(term) {\n    const response = await axios // checking we have recieved our term\n    // console.log(term);\n    // 1st arg: url, 2nd arg: can be a header object or params\n    .get('https://api.unsplash.com/search/photos', {\n      params: {\n        query: term\n      },\n      // unsplash api specifies ?query=<searchterm>\n      headers: {\n        Authorization: 'Client-ID IOTscvBnqHnIDkLD1xl0xSaWT1yqzGD1LPtnktPPz6c'\n      } // promise (success) if that happens we move to then\n\n    }); // this is the response we want\n    // console.log(response.data.results);\n    // set state to create re-render\n\n    this.setState({\n      images: response.data.results\n    });\n  } // - we can call onSubmit anything because we are creating it, but in SearchBar it needs to be very specific\n  // because it is a normal JSX element, not a reference\n  // - we then wrote a result on the JSX to tell us that images\n  // came through on our API request\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui container\",\n      style: {\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSubmit: this.onSearchSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 6\n      }, this), \"Found: \", this.state.images.length, \" images\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/james_cameron-mowat/pics/src/components/app.js"],"names":["React","axios","SearchBar","App","Component","state","images","onSearchSubmit","term","response","get","params","query","headers","Authorization","setState","data","results","render","marginTop","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEjCC,KAFiC,GAEzB;AAACC,MAAAA,MAAM,EAAE;AAAT,KAFyB;AAAA;;AAEX;AAEvB;AACA;AACqB,QAAdC,cAAc,CAACC,IAAD,EAAM;AACzB,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAC5B;AACA;AACA;AAH4B,KAI3BS,GAJsB,CAIlB,wCAJkB,EAIwB;AAC7CC,MAAAA,MAAM,EAAE;AAACC,QAAAA,KAAK,EAAEJ;AAAR,OADqC;AACtB;AACvBK,MAAAA,OAAO,EAAE;AACRC,QAAAA,aAAa,EAAE;AADP,OAFoC,CAI3C;;AAJ2C,KAJxB,CAAvB,CADyB,CAWzB;AACA;AAEA;;AACA,SAAKC,QAAL,CAAc;AAACT,MAAAA,MAAM,EAAEG,QAAQ,CAACO,IAAT,CAAcC;AAAvB,KAAd;AACA,GAtBgC,CAuBlC;AACA;AACA;AACA;;;AACCC,EAAAA,MAAM,GAAG;AACR,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAArC;AAAA,8BACC,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAE,KAAKZ;AAA1B;AAAA;AAAA;AAAA;AAAA,cADD,aAEQ,KAAKF,KAAL,CAAWC,MAAX,CAAkBc,MAF1B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMA;;AAlCgC;;AAqClC,eAAejB,GAAf","sourcesContent":["import React from 'react';\n// imports we have created by convention go at the bottom\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\n\n\n// refactored to class based component so we can access search\n// bar from here\n// const App = () => {\n// \treturn (\n// \t\t<div className=\"ui container\" \n// \t\tstyle={{marginTop: '10px'}}>\n// \t\t\t<SearchBar/>\n// \t\t</div>\n// \t\t);\n// };\n\nclass App extends React.Component {\n\n\tstate = {images: []}; // we expect an array of images as default\n\n// here we can start doing data loading from inside the app\n// async keyword we can use axios await function instead of a standard promise, then. Can be easier\n\tasync onSearchSubmit(term){\n\t\tconst response = await axios\n\t\t// checking we have recieved our term\n\t\t// console.log(term);\n\t\t// 1st arg: url, 2nd arg: can be a header object or params\n\t\t.get('https://api.unsplash.com/search/photos', {\n\t\t\t\tparams: {query: term}, // unsplash api specifies ?query=<searchterm>\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Client-ID IOTscvBnqHnIDkLD1xl0xSaWT1yqzGD1LPtnktPPz6c'\n\t\t\t\t} // promise (success) if that happens we move to then\n\t\t});\n\t\t// this is the response we want\n\t\t// console.log(response.data.results);\n\n\t\t// set state to create re-render\n\t\tthis.setState({images: response.data.results});\n\t}\n// - we can call onSubmit anything because we are creating it, but in SearchBar it needs to be very specific\n// because it is a normal JSX element, not a reference\n// - we then wrote a result on the JSX to tell us that images\n// came through on our API request\n\trender() {\n\t\treturn (\n\t\t\t\t<div className=\"ui container\" style={{marginTop: '10px'}}>\n\t\t\t\t\t<SearchBar onSubmit={this.onSearchSubmit}/>\n\t\t\t\tFound: {this.state.images.length} images\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}