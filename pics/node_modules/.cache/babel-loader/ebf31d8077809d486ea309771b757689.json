{"ast":null,"code":"var _jsxFileName = \"/Users/james_cameron-mowat/pics/src/components/ImageCar.js\";\n// purpose of this is too show one image by itself\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ImageCar extends React.Component {\n  constructor(props) {\n    super(props); // initialised state\n\n    this.setSpans = () => {\n      const height = this.imageRef.current.clientHeight;\n      const spans = Math.ceil(height / 150);\n      this.setState({\n        spans: spans\n      }); //console.log(this.imageRef.current.clientHeight);\n    };\n\n    this.state = {\n      spans: 0\n    }; // DOM React ref\n\n    this.imageRef = /*#__PURE__*/React.createRef();\n  } // this is too early - it is before the image has actually been loaded\n\n\n  componentDidMount() {\n    //console.log(this.imageRef);\n    // the second an image renders we print out the height of the image\n    // the instant after this happens the image itself has not actually loaded yet\n    //console.log(this.imageRef.current.clientHeight);\n    // when an image has loaded, the event listener takes care of this\n    this.imageRef.current.addEventListener('load', this.setSpans);\n  } // callback - this is where we will figure out heights of each image\n\n\n  render() {\n    const {\n      description,\n      urls\n    } = this.props.image;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        gridRowEnd: `span ${this.state.spans}`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        ref: this.imageRef,\n        alt: description,\n        src: urls.regular\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default ImageCar;","map":{"version":3,"sources":["/Users/james_cameron-mowat/pics/src/components/ImageCar.js"],"names":["React","ImageCar","Component","constructor","props","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","setState","state","createRef","componentDidMount","addEventListener","render","description","urls","image","gridRowEnd","regular"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,QAAN,SAAuBD,KAAK,CAACE,SAA7B,CAAuC;AAEtCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SAsBlBC,QAtBkB,GAsBP,MAAM;AAChB,YAAMC,MAAM,GAAG,KAAKC,QAAL,CAAcC,OAAd,CAAsBC,YAArC;AACA,YAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUN,MAAM,GAAG,GAAnB,CAAd;AACA,WAAKO,QAAL,CAAc;AAACH,QAAAA,KAAK,EAAEA;AAAR,OAAd,EAHgB,CAMhB;AACA,KA7BiB;;AAIjB,SAAKI,KAAL,GAAa;AAACJ,MAAAA,KAAK,EAAE;AAAR,KAAb,CAJiB,CAMjB;;AACA,SAAKH,QAAL,gBAAgBP,KAAK,CAACe,SAAN,EAAhB;AACA,GAVqC,CAYtC;;;AACAC,EAAAA,iBAAiB,GAAE;AAClB;AACA;AACA;AACA;AAEA;AACA,SAAKT,QAAL,CAAcC,OAAd,CAAsBS,gBAAtB,CAAuC,MAAvC,EAA+C,KAAKZ,QAApD;AACA,GArBqC,CAuBtC;;;AAUAa,EAAAA,MAAM,GAAE;AACP,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAsB,KAAKhB,KAAL,CAAWiB,KAAvC;AACA,wBACC;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,UAAU,EAAG,QAAO,KAAKR,KAAL,CAAWJ,KAAM;AAAtC,OAAZ;AAAA,8BACC;AAAK,QAAA,GAAG,EAAE,KAAKH,QAAf;AAAyB,QAAA,GAAG,EAAEY,WAA9B;AAA2C,QAAA,GAAG,EAAEC,IAAI,CAACG;AAArD;AAAA;AAAA;AAAA;AAAA,cADD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAKA;;AAxCqC;;AA2CvC,eAAetB,QAAf","sourcesContent":["// purpose of this is too show one image by itself\nimport React from 'react';\n\nclass ImageCar extends React.Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\t// initialised state\n\t\tthis.state = {spans: 0};\n\n\t\t// DOM React ref\n\t\tthis.imageRef = React.createRef();\n\t}\n\n\t// this is too early - it is before the image has actually been loaded\n\tcomponentDidMount(){\n\t\t//console.log(this.imageRef);\n\t\t// the second an image renders we print out the height of the image\n\t\t// the instant after this happens the image itself has not actually loaded yet\n\t\t//console.log(this.imageRef.current.clientHeight);\n\n\t\t// when an image has loaded, the event listener takes care of this\n\t\tthis.imageRef.current.addEventListener('load', this.setSpans);\n\t}\n\n\t// callback - this is where we will figure out heights of each image\n\tsetSpans = () => {\n\t\tconst height = this.imageRef.current.clientHeight;\n\t\tconst spans = Math.ceil(height / 150);\n\t\tthis.setState({spans: spans});\n\t\t\n\n\t\t//console.log(this.imageRef.current.clientHeight);\n\t}\n\n\trender(){\n\t\tconst {description, urls} = this.props.image;\n\t\treturn (\n\t\t\t<div style={{gridRowEnd: `span ${this.state.spans}`}}>\n\t\t\t\t<img ref={this.imageRef} alt={description} src={urls.regular}/>;\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ImageCar;"]},"metadata":{},"sourceType":"module"}