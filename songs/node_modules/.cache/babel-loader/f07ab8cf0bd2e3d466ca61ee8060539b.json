{"ast":null,"code":"var _jsxFileName = \"/Users/james_cameron-mowat/Documents/React Apps/songs/src/components/songDetail.js\";\nimport React from 'react';\nimport { connect } from 'react-redux'; // working with a functional component this time\n// destructured argument instead of props\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SongDetail = ({\n  selectedSongDetail\n}) => {\n  // if song does not yet exist guard to prevent undefined error\n  if (!selectedSongDetail) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Select a song\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 33\n  }, this); // this will show song detail when we click on a song\n  // console.log(props); (if using it as an argument)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: selectedSongDetail.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n}; // starting process of link up to connect so we can ge\n// information from our redux store\n// called with our state object\n// we reach in and grab just the props that we care about\n// we then return it as an object from this function\n\n\n_c = SongDetail;\n\nconst mapStateToProps = state => {\n  // looking at the combineReducers function in index.js\n  // in the reducers folder, we can see the property selectedSong\n  // this is what we need to access here.\n  // we can call the key whatever we want\n  // this is what shows up as our props object inside the component\n  return {\n    selectedSongDetail: state.selectedSong\n  };\n};\n\nexport default connect(mapStateToProps)(SongDetail);\n\nvar _c;\n\n$RefreshReg$(_c, \"SongDetail\");","map":{"version":3,"sources":["/Users/james_cameron-mowat/Documents/React Apps/songs/src/components/songDetail.js"],"names":["React","connect","SongDetail","selectedSongDetail","title","mapStateToProps","state","selectedSong"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;;;;AACA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA4B;AAC9C;AACA,MAAG,CAACA,kBAAJ,EAAwB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAFsB,CAG9C;AACA;;AACA,sBACC;AAAA,cACGA,kBAAkB,CAACC;AADtB;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAVD,C,CAYA;AACA;AACA;AACA;AACA;;;KAhBMF,U;;AAiBN,MAAMG,eAAe,GAAGC,KAAK,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA,SAAO;AACNH,IAAAA,kBAAkB,EAAEG,KAAK,CAACC;AADpB,GAAP;AAGA,CATD;;AAWA,eAAeN,OAAO,CAACI,eAAD,CAAP,CAAyBH,UAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\n// working with a functional component this time\n// destructured argument instead of props\nconst SongDetail = ({ selectedSongDetail }) => {\n\t// if song does not yet exist guard to prevent undefined error\n\tif(!selectedSongDetail) return <div>Select a song</div>\n\t// this will show song detail when we click on a song\n\t// console.log(props); (if using it as an argument)\n\treturn (\n\t\t<div>\n\t\t\t{ selectedSongDetail.title }\n\t\t</div>\n\t);\n};\n\n// starting process of link up to connect so we can ge\n// information from our redux store\n// called with our state object\n// we reach in and grab just the props that we care about\n// we then return it as an object from this function\nconst mapStateToProps = state => {\n\t// looking at the combineReducers function in index.js\n\t// in the reducers folder, we can see the property selectedSong\n\t// this is what we need to access here.\n\t// we can call the key whatever we want\n\t// this is what shows up as our props object inside the component\n\treturn {\n\t\tselectedSongDetail: state.selectedSong\n\t}\n};\n\nexport default connect(mapStateToProps)(SongDetail);"]},"metadata":{},"sourceType":"module"}