{"ast":null,"code":"var _jsxFileName = \"/Users/james_cameron-mowat/Documents/React Apps/translate/src/components/App.js\";\nimport React from 'react';\nimport UserCreate from './UserCreate';\nimport LanguageContext from '../contexts/LanguageContext';\nimport ColorContext from '../contexts/ColorContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      language: 'english'\n    };\n\n    this.onLanguageChange = language => {\n      this.setState({\n        language: language\n      });\n    };\n  }\n\n  // userCreate has both button and field, so it needs to be interacted with\n  // the 'value' property is a very special part of a provider, and you put the state property in it so when it changes, the context changes as well\n  // we didnt need to use this.state.language but it's just how we did it here\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Select a language:\", /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"flag us\",\n          onClick: () => this.onLanguageChange('english')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"flag nl\",\n          onClick: () => this.onLanguageChange('dutch')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n        value: this.state.language,\n        children: /*#__PURE__*/_jsxDEV(UserCreate, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/james_cameron-mowat/Documents/React Apps/translate/src/components/App.js"],"names":["React","UserCreate","LanguageContext","ColorContext","App","Component","state","language","onLanguageChange","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BC,KAF8B,GAEtB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAFsB;;AAAA,SAI9BC,gBAJ8B,GAIXD,QAAQ,IAAI;AAC3B,WAAKE,QAAL,CAAc;AAACF,QAAAA,QAAQ,EAAEA;AAAX,OAAd;AACH,KAN6B;AAAA;;AAQ9B;AACA;AACA;AACAG,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAA,sDAEI;AAAG,UAAA,SAAS,EAAC,SAAb;AAAuB,UAAA,OAAO,EAAE,MAAM,KAAKF,gBAAL,CAAsB,SAAtB;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAG,UAAA,SAAS,EAAC,SAAb;AAAuB,UAAA,OAAO,EAAE,MAAM,KAAKA,gBAAL,CAAsB,OAAtB;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,QAA5C;AAAA,+BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAzB6B;;AA4BlC,eAAeH,GAAf","sourcesContent":["import React from 'react';\nimport UserCreate from './UserCreate';\nimport LanguageContext from '../contexts/LanguageContext';\nimport ColorContext from '../contexts/ColorContext';\n\nclass App extends React.Component {\n\n    state = { language: 'english'};\n\n    onLanguageChange = language => {\n        this.setState({language: language});\n    };\n\n    // userCreate has both button and field, so it needs to be interacted with\n    // the 'value' property is a very special part of a provider, and you put the state property in it so when it changes, the context changes as well\n    // we didnt need to use this.state.language but it's just how we did it here\n    render(){\n        return (\n            <div className=\"ui container\">\n                <div>\n                    Select a language:\n                    <i className=\"flag us\" onClick={() => this.onLanguageChange('english')}/>\n                    <i className=\"flag nl\" onClick={() => this.onLanguageChange('dutch')}/>\n                </div>\n                <LanguageContext.Provider value={this.state.language}>\n                    <UserCreate />\n                </LanguageContext.Provider>\n                \n            </div>\n        );\n    }\n} \n\nexport default App;"]},"metadata":{},"sourceType":"module"}