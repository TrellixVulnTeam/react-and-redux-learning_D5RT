{"ast":null,"code":"var _jsxFileName = \"/Users/james_cameron-mowat/Documents/React Apps/translate/src/components/App.js\";\nimport React from 'react';\nimport UserCreate from './UserCreate';\nimport { LanguageStore } from '../contexts/LanguageContext';\nimport ColorContext from '../contexts/ColorContext';\nimport LanguageSelector from './LanguageSelector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      language: 'english'\n    };\n\n    this.onLanguageChange = language => {\n      this.setState({\n        language: language\n      });\n    };\n  }\n\n  // userCreate has both button and field, so it needs to be interacted with\n  // the 'value' property is a very special part of a provider, and you put the state property in it so when it changes, the context changes as well\n  // we didnt need to use this.state.language but it's just how we did it here\n  // we linked multiple providers to UserCreate\n  // we removed the LanguageContext provider and replace it with LanguageStore\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui container\",\n      children: /*#__PURE__*/_jsxDEV(LanguageStore, {\n        children: [/*#__PURE__*/_jsxDEV(LanguageSelector, {\n          onLanguageChange: this.onLanguageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ColorContext.Provider, {\n          value: \"red\",\n          children: /*#__PURE__*/_jsxDEV(UserCreate, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/james_cameron-mowat/Documents/React Apps/translate/src/components/App.js"],"names":["React","UserCreate","LanguageStore","ColorContext","LanguageSelector","App","Component","state","language","onLanguageChange","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAEA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BC,KAF8B,GAEtB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAFsB;;AAAA,SAI9BC,gBAJ8B,GAIXD,QAAQ,IAAI;AAC3B,WAAKE,QAAL,CAAc;AAACF,QAAAA,QAAQ,EAAEA;AAAX,OAAd;AACH,KAN6B;AAAA;;AAQ9B;AACA;AACA;AACA;AAEA;AACAG,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACI,QAAC,aAAD;AAAA,gCACA,QAAC,gBAAD;AAAkB,UAAA,gBAAgB,EAAE,KAAKF;AAAzC;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA,QAAC,YAAD,CAAc,QAAd;AAAuB,UAAA,KAAK,EAAC,KAA7B;AAAA,iCAEQ,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AA3B6B;;AA8BlC,eAAeJ,GAAf","sourcesContent":["import React from 'react';\nimport UserCreate from './UserCreate';\nimport { LanguageStore } from '../contexts/LanguageContext';\nimport ColorContext from '../contexts/ColorContext';\nimport LanguageSelector from './LanguageSelector';\n\nclass App extends React.Component {\n\n    state = { language: 'english'};\n\n    onLanguageChange = language => {\n        this.setState({language: language});\n    };\n\n    // userCreate has both button and field, so it needs to be interacted with\n    // the 'value' property is a very special part of a provider, and you put the state property in it so when it changes, the context changes as well\n    // we didnt need to use this.state.language but it's just how we did it here\n    // we linked multiple providers to UserCreate\n\n    // we removed the LanguageContext provider and replace it with LanguageStore\n    render(){\n        return (\n            <div className=\"ui container\">\n                <LanguageStore>\n                <LanguageSelector onLanguageChange={this.onLanguageChange}/>\n                <ColorContext.Provider value=\"red\">\n                    \n                        <UserCreate />\n                   \n                </ColorContext.Provider>\n                </LanguageStore>\n            </div>\n        );\n    }\n} \n\nexport default App;"]},"metadata":{},"sourceType":"module"}