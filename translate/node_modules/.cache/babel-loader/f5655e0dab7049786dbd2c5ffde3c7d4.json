{"ast":null,"code":"var _jsxFileName = \"/Users/james_cameron-mowat/Documents/React Apps/translate/src/contexts/LanguageContext.js\";\n// we make a separate file for this so we can make use of it where we actually want it\nimport React from 'react'; // context with default value to be used by button and field components\n// create context takes an arg of any js type, object, array, number etc.\n// to change the context value we need to create a provider in the App component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext('english');\n\nclass LanguageStore extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      language: 'english'\n    };\n\n    this.onLanguageChange = language => {\n      this.setState({\n        language\n      });\n    };\n  }\n\n  // 3. render method with provider - passing the currently selected language and our callback (our data and a way to change our data)\n  // this is how we share and allow other components to change the selected language\n  // 4. we also need to wrap our provider tag around the components\n  // this.props.children is the jsx of all our other components giving them all access to the context object\n  render() {\n    return /*#__PURE__*/_jsxDEV(Context.Provider, {\n      value: { ...this.state,\n        onLanguageChange\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Context;","map":{"version":3,"sources":["/Users/james_cameron-mowat/Documents/React Apps/translate/src/contexts/LanguageContext.js"],"names":["React","Context","createContext","LanguageStore","Component","state","language","onLanguageChange","setState","render","props","children"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;;;AACA,MAAMC,OAAO,gBAAGD,KAAK,CAACE,aAAN,CAAoB,SAApB,CAAhB;;AAEA,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA2C;AAAA;AAAA;AAAA,SAEvCC,KAFuC,GAE/B;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAF+B;;AAAA,SAIvCC,gBAJuC,GAIpBD,QAAQ,IAAI;AAC3B,WAAKE,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACH,KANsC;AAAA;;AAOvC;AACA;AACA;AACA;AACAG,EAAAA,MAAM,GAAE;AACJ,wBACI,QAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAE,EAAE,GAAG,KAAKJ,KAAV;AAAiBE,QAAAA;AAAjB,OAAzB;AAAA,gBACK,KAAKG,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAjBsC;;AAoB3C,eAAeV,OAAf","sourcesContent":["// we make a separate file for this so we can make use of it where we actually want it\nimport React from 'react';\n\n// context with default value to be used by button and field components\n// create context takes an arg of any js type, object, array, number etc.\n// to change the context value we need to create a provider in the App component\nconst Context = React.createContext('english');\n\nclass LanguageStore extends React.Component{\n    // 1. setting a state property to maintain the current language\n    state = {language: 'english'};\n    // 2. (inside) callback for other components to change the selected language\n    onLanguageChange = language => {\n        this.setState({ language });\n    }\n    // 3. render method with provider - passing the currently selected language and our callback (our data and a way to change our data)\n    // this is how we share and allow other components to change the selected language\n    // 4. we also need to wrap our provider tag around the components\n    // this.props.children is the jsx of all our other components giving them all access to the context object\n    render(){\n        return (\n            <Context.Provider value={{ ...this.state, onLanguageChange }}>\n                {this.props.children}\n            </Context.Provider>\n        );\n    }\n}\n\nexport default Context;"]},"metadata":{},"sourceType":"module"}