{"ast":null,"code":"var _jsxFileName = \"/Users/james_cameron-mowat/Documents/React Apps/blog/src/components/UserHeader.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUser } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserHeader extends React.Component {\n  // this attempts to fetch it's own data, after we implemented over fetching solution 2\n  // we didn't need this anymore\n  componentDidMount() {\n    this.props.fetchUser(this.props.userId);\n  } // find method is invoked with each element inside the array and when that id is found return that id\n\n\n  render() {\n    // moved to mapStateToProps\n    //const user = this.props.users.find((user) => user.id === this.props.userId);\n    const {\n      user\n    } = this.props; // if we don't find a user return null\n\n    if (!user) return null; // otherwise show the user's name\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  }\n\n} // give component redux level state\n// using ownProps to provide ref to the props seen in componentDidMount\n// which are sent to the render function\n// this is so we don't get all the users back just the user we care about\n\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    user: state.users.find(user => user.id === ownProps.userId)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchUser\n})(UserHeader);","map":{"version":3,"sources":["/Users/james_cameron-mowat/Documents/React Apps/blog/src/components/UserHeader.js"],"names":["React","connect","fetchUser","UserHeader","Component","componentDidMount","props","userId","render","user","name","mapStateToProps","state","ownProps","users","find","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACrC;AACA;AACAC,EAAAA,iBAAiB,GAAE;AACf,SAAKC,KAAL,CAAWJ,SAAX,CAAqB,KAAKI,KAAL,CAAWC,MAAhC;AACH,GALoC,CAOrC;;;AACAC,EAAAA,MAAM,GAAE;AACJ;AACA;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKH,KAAtB,CAJI,CAKJ;;AACA,QAAG,CAACG,IAAJ,EAAU,OAAO,IAAP,CANN,CAQJ;;AACA,wBAAO;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBAAyBA,IAAI,CAACC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAlBoC,C,CAqBzC;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AAAEJ,IAAAA,IAAI,EAAEG,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiBN,IAAI,IAAIA,IAAI,CAACO,EAAL,KAAYH,QAAQ,CAACN,MAA9C;AAAR,GAAP;AACH,CAFD;;AAIA,eAAeN,OAAO,CAACU,eAAD,EAAkB;AAACT,EAAAA;AAAD,CAAlB,CAAP,CAAsCC,UAAtC,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUser } from '../actions';\n\nclass UserHeader extends React.Component {\n    // this attempts to fetch it's own data, after we implemented over fetching solution 2\n    // we didn't need this anymore\n    componentDidMount(){ \n        this.props.fetchUser(this.props.userId);\n    }\n\n    // find method is invoked with each element inside the array and when that id is found return that id\n    render(){\n        // moved to mapStateToProps\n        //const user = this.props.users.find((user) => user.id === this.props.userId);\n\n        const { user } = this.props;\n        // if we don't find a user return null\n        if(!user) return null;\n\n        // otherwise show the user's name\n        return <div className=\"header\">{user.name}</div>;\n    }\n}\n\n// give component redux level state\n// using ownProps to provide ref to the props seen in componentDidMount\n// which are sent to the render function\n// this is so we don't get all the users back just the user we care about\nconst mapStateToProps = (state, ownProps) => {\n    return { user: state.users.find(user => user.id === ownProps.userId)};\n};\n\nexport default connect(mapStateToProps, {fetchUser})(UserHeader);"]},"metadata":{},"sourceType":"module"}