{"ast":null,"code":"import jsonPlaceholder from '../apis/jsonPlaceholder'; // action creator, this makes the api request\n\nexport const fetchPosts = () => {\n  // dispatch - power to make changes to the data on the redux side of our app\n  // getState - this can be called on the redux store and will return all the data inside the store\n  // manual dispatch - once the request is complete we need to manually dispatch the action\n  return function (dispatch, getState) {\n    // bad approach!!! the normal way is not how we do this\n    const promise = jsonPlaceholder.get('/posts'); // this is not an action, as it is turned into ES2015 by the DOM\n    // the async await syntax is actually a lot more code than we see here\n    // when you see it translated with Babel, therefore this will not work with redux, because\n    // it expects a plain old js object\n    // normal action - but instead of this\n    // return {\n    //     type: 'FETCH_POSTS',\n    //     payload: promise\n    // };\n    // this\n  };\n}; // alternatively, we could change the response name to a promise and get rid\n// of the async await syntax, however this still won't work in the way you would expect\n// the redux cycle happens much quicker than the request to the server does, so the data will not \n// be there by the time the redux cycle is ready to update the state at the end of the cycle\n// the answer to this problem = middleware\n// instead of sending our actions to reducers, we send it to middleware instead\n// the middleware can stop, modify or do whatever to actions\n// so that the cycle here happens in the correct order and time that suits async operations","map":{"version":3,"sources":["/Users/james_cameron-mowat/Documents/React Apps/blog/src/actions/index.js"],"names":["jsonPlaceholder","fetchPosts","dispatch","getState","promise","get"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B;AACA;AACA;AACA,SAAO,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACpC;AACA,UAAMC,OAAO,GAAGJ,eAAe,CAACK,GAAhB,CAAoB,QAApB,CAAhB,CAFoC,CAGpC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH,GAdG;AAeH,CAnBM,C,CAqBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import jsonPlaceholder from '../apis/jsonPlaceholder';\n\n// action creator, this makes the api request\nexport const fetchPosts = () => {\n    // dispatch - power to make changes to the data on the redux side of our app\n    // getState - this can be called on the redux store and will return all the data inside the store\n    // manual dispatch - once the request is complete we need to manually dispatch the action\n    return function(dispatch, getState) {\n    // bad approach!!! the normal way is not how we do this\n    const promise = jsonPlaceholder.get('/posts');\n    // this is not an action, as it is turned into ES2015 by the DOM\n    // the async await syntax is actually a lot more code than we see here\n    // when you see it translated with Babel, therefore this will not work with redux, because\n    // it expects a plain old js object\n\n    // normal action - but instead of this\n    // return {\n    //     type: 'FETCH_POSTS',\n    //     payload: promise\n    // };\n    // this\n}\n};\n\n// alternatively, we could change the response name to a promise and get rid\n// of the async await syntax, however this still won't work in the way you would expect\n// the redux cycle happens much quicker than the request to the server does, so the data will not \n// be there by the time the redux cycle is ready to update the state at the end of the cycle\n\n// the answer to this problem = middleware\n// instead of sending our actions to reducers, we send it to middleware instead\n// the middleware can stop, modify or do whatever to actions\n// so that the cycle here happens in the correct order and time that suits async operations\n"]},"metadata":{},"sourceType":"module"}