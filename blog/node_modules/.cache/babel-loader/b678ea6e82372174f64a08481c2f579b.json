{"ast":null,"code":"import _ from 'lodash';\nimport jsonPlaceholder from '../apis/jsonPlaceholder'; // =============\n// overfetching solution no. 2\n// ============\n// aggregated action creator - contains both fetchPosts and fetchUsers\n\nexport const fetchPostsAndUsers = () => async dispatch => {\n  // call fetchPosts and fetchUsers multiple times, and the user will only call this function now\n  // think of this then as the public method and the smaller methods are now private\n  // make sure that you dispatch the result of the action creator\n  // call fetchPosts, and await (waits for the api request to complete before anything else is done underneath in this function)\n  console.log('About to fetch posts');\n  await dispatch(fetchPosts());\n  console.log('Fetched posts!'); // get list of posts\n}; // action creator, this makes the api request\n\nexport const fetchPosts = () => {\n  // dispatch - power to make changes to the data on the redux side of our app\n  // getState - this can be called on the redux store and will return all the data inside the store\n  // manual dispatch - once the request is complete we need to manually dispatch the action\n  return async (dispatch, getState) => {\n    // bad approach!!! the normal way is not how we do this\n    const response = await jsonPlaceholder.get('/posts'); // this is not an action, as it is turned into ES2015 by the DOM\n    // the async await syntax is actually a lot more code than we see here\n    // when you see it translated with Babel, therefore this will not work with redux, because\n    // it expects a plain old js object\n    // normal action - but instead of this...\n    // return {\n    //     type: 'FETCH_POSTS',\n    //     payload: promise\n    // };\n    // this, note we also are only interested in the data of the payload\n\n    dispatch({\n      type: 'FETCH_POSTS',\n      payload: response.data\n    });\n  };\n}; // alternatively, we could change the response name to a promise and get rid\n// of the async await syntax, however this still won't work in the way you would expect\n// the redux cycle happens much quicker than the request to the server does, so the data will not \n// be there by the time the redux cycle is ready to update the state at the end of the cycle\n// the answer to this problem = middleware\n// instead of sending our actions to reducers, we send it to middleware instead\n// the middleware can stop, modify or do whatever to actions\n// so that the cycle here happens in the correct order and time that suits async operations\n// after thunk is calibrated, it will only return the inner function(dispatch, getState) so we can\n// use the async await syntax again\n// bear in mind we are not using the getState arg here, but we likely will in future projects\n// this code can be neatly refactored further, do so in future projects\n// ===========\n// overfetching solution no. 1\n// ============\n// this is the quick and easy but weird looking solution - only fetching one user per request\n// using lodash to only fetch a unique user one time using memoization\n// fetch user action creator with an id, using shortened syntax\n// function that calls another function, that calls _fetchUser with id and dispatch arguments\n// a side effect of this solution is that if you want to refetch another user if it changes you can't very efficiently\n// the underscore (_)fetchUser indicates a private function (it shouldnt be changed)\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\n// const _fetchUser = _.memoize(async(id, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n//     dispatch({ type: 'FETCH_USER', payload: response.data});\n// });\n// ===========\n// overfetching solution no. 2\n// ===========\n\nexport const fetchUser = id => async dispatch => {\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n  dispatch({\n    type: 'FETCH_USER',\n    payload: response.data\n  });\n}; // using lodash memoize to only get a unique user once, it doesnt work\n// we need to memoize it outside the main function and that way it will work the way we expect\n// export const fetchUser = function(id) {\n//     return _.memoize(async function(dispatch){\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n//     dispatch({ type: 'FETCH_USER', payload: response.data});\n//     });\n// };","map":{"version":3,"sources":["/Users/james_cameron-mowat/Documents/React Apps/blog/src/actions/index.js"],"names":["_","jsonPlaceholder","fetchPostsAndUsers","dispatch","console","log","fetchPosts","getState","response","get","type","payload","data","fetchUser","id"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,yBAA5B,C,CAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACtD;AACA;AACA;AAEA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,QAAMF,QAAQ,CAACG,UAAU,EAAX,CAAd;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EARsD,CAStD;AAEH,CAXM,C,CAaP;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B;AACA;AACA;AACA,SAAO,OAAOH,QAAP,EAAiBI,QAAjB,KAA8B;AACrC;AACA,UAAMC,QAAQ,GAAG,MAAMP,eAAe,CAACQ,GAAhB,CAAoB,QAApB,CAAvB,CAFqC,CAGrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAN,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,KAAD,CAAR;AACH,GAfG;AAgBH,CApBM,C,CAsBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAGC,EAAE,IAAI,MAAMX,QAAN,IAAkB;AAC7C,QAAMK,QAAQ,GAAG,MAAMP,eAAe,CAACQ,GAAhB,CAAqB,UAASK,EAAG,EAAjC,CAAvB;AAEAX,EAAAA,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAxC,GAAD,CAAR;AACH,CAJM,C,CAMP;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA","sourcesContent":["import _ from 'lodash';\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\n\n// =============\n// overfetching solution no. 2\n// ============\n// aggregated action creator - contains both fetchPosts and fetchUsers\nexport const fetchPostsAndUsers = () => async dispatch => {\n    // call fetchPosts and fetchUsers multiple times, and the user will only call this function now\n    // think of this then as the public method and the smaller methods are now private\n    // make sure that you dispatch the result of the action creator\n\n    // call fetchPosts, and await (waits for the api request to complete before anything else is done underneath in this function)\n    console.log('About to fetch posts');\n    await dispatch(fetchPosts());\n    console.log('Fetched posts!');\n    // get list of posts\n\n};\n\n// action creator, this makes the api request\nexport const fetchPosts = () => {\n    // dispatch - power to make changes to the data on the redux side of our app\n    // getState - this can be called on the redux store and will return all the data inside the store\n    // manual dispatch - once the request is complete we need to manually dispatch the action\n    return async (dispatch, getState) => {\n    // bad approach!!! the normal way is not how we do this\n    const response = await jsonPlaceholder.get('/posts');\n    // this is not an action, as it is turned into ES2015 by the DOM\n    // the async await syntax is actually a lot more code than we see here\n    // when you see it translated with Babel, therefore this will not work with redux, because\n    // it expects a plain old js object\n    // normal action - but instead of this...\n    // return {\n    //     type: 'FETCH_POSTS',\n    //     payload: promise\n    // };\n\n    // this, note we also are only interested in the data of the payload\n    dispatch({ type: 'FETCH_POSTS', payload: response.data})\n}\n};\n\n// alternatively, we could change the response name to a promise and get rid\n// of the async await syntax, however this still won't work in the way you would expect\n// the redux cycle happens much quicker than the request to the server does, so the data will not \n// be there by the time the redux cycle is ready to update the state at the end of the cycle\n\n// the answer to this problem = middleware\n// instead of sending our actions to reducers, we send it to middleware instead\n// the middleware can stop, modify or do whatever to actions\n// so that the cycle here happens in the correct order and time that suits async operations\n\n// after thunk is calibrated, it will only return the inner function(dispatch, getState) so we can\n// use the async await syntax again\n\n// bear in mind we are not using the getState arg here, but we likely will in future projects\n\n// this code can be neatly refactored further, do so in future projects\n\n// ===========\n// overfetching solution no. 1\n// ============\n// this is the quick and easy but weird looking solution - only fetching one user per request\n// using lodash to only fetch a unique user one time using memoization\n// fetch user action creator with an id, using shortened syntax\n// function that calls another function, that calls _fetchUser with id and dispatch arguments\n// a side effect of this solution is that if you want to refetch another user if it changes you can't very efficiently\n// the underscore (_)fetchUser indicates a private function (it shouldnt be changed)\n\n// export const fetchUser = id => dispatch => _fetchUser(id, dispatch);\n// const _fetchUser = _.memoize(async(id, dispatch) => {\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n\n//     dispatch({ type: 'FETCH_USER', payload: response.data});\n// });\n\n// ===========\n// overfetching solution no. 2\n// ===========\nexport const fetchUser = id => async dispatch => {\n    const response = await jsonPlaceholder.get(`/users/${id}`);\n\n    dispatch({ type: 'FETCH_USER', payload: response.data});\n};\n\n// using lodash memoize to only get a unique user once, it doesnt work\n// we need to memoize it outside the main function and that way it will work the way we expect\n// export const fetchUser = function(id) {\n\n//     return _.memoize(async function(dispatch){\n//     const response = await jsonPlaceholder.get(`/users/${id}`);\n\n//     dispatch({ type: 'FETCH_USER', payload: response.data});\n//     });\n// };"]},"metadata":{},"sourceType":"module"}